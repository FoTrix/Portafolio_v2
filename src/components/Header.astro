---
import { Icon } from "astro-icon/components";
import { iconsFloat, socialLinks} from "../data/dataHeader.json"
---

<section
  id="header-section"
  class="relative h-screen grid place-content-center text-focus-in scroll-smooth w-full transition-all duration-300"
>
  <div
    class="container p-4 rounded-4xl mx-auto px-4 sm:px-6 md:px-10 py-6 sm:py-8 md:py-20 z-10 relative grid grid-cols-1 md:grid-cols-2 gap-8 place-items-center"
  >
    <div class="text-center md:text-left">
      <h1 class="text-4xl sm:text-5xl md:text-7xl font-bold mb-4 sm:mb-6">
        <span class="text-3xl sm:text-4xl md:text-5xl">Hi there! ðŸš€</span>
        <span class="block text-blue-700 text-shadow-lg">I'm Daniel Uribe</span>
      </h1>
      <p
        class="text-lg sm:text-xl md:text-2xl font-mono font-medium uppercase mb-6 sm:mb-8 w-fit mx-auto md:mx-0 text-gray-600 text-shadow-lg underline decoration-amber-500 underline-offset-5"
      >
        Full-Stack Developer
      </p>
        <a 
          href="/Daniel-Ignacio-Uribe-Pulgar-CV.pdf" 
          download 
          class="group inline-flex items-center gap-2 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-bold py-3 px-6 rounded-lg transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 active:scale-95 overflow-hidden relative"
        >
          <Icon name="ant-design:cloud-download-outlined" size="20" class="group-hover:rotate-12 transition-transform duration-300" />
          <span class="relative z-10">Descargar CV</span>
          <span class="relative flex h-3 w-3">
            <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-600 opacity-75"></span>
            <span class="relative inline-flex rounded-full h-3 w-3 bg-green-600"></span>
          </span>
        </a>
    </div>
    <div class="grid place-items-center relative">
      <div
        id="avatar"
        class="overflow-hidden rounded-[50%] size-64 sm:size-72 md:size-80 bg-blue-300 drop-shadow-xl transform transition-shadow duration-300 ease hover:drop-shadow-2xl"
      >
        <img
          src="/avatar.png"
          alt="avatar"
          class="object-cover mx-auto h-full sombra"
        />
      </div>
      <!-- Social media icons -->
     {
      socialLinks.map(social => {
        const { icon, url, iconClasses, parentClasses } = social;
        return (
      <div
        class={parentClasses}
      >
        <a 
        href={url}
        target="_blank"
        >
        <Icon
        name={icon}
        size="25"
        class={iconClasses}
        />
        </a>
      </div>
        )
      })
     }

    </div>
  </div>

  <div class="absolute overflow-hidden inset-0 z-0 hidden md:block" id="parallax-container">
    {
      iconsFloat.map((icon) => (
        <div class="icon-wrapper absolute" style={`top: 0; left: 0; ${icon.position.includes('top') ? `top: ${icon.position.match(/top-\[([^%]+)%\]/)[1]}%` : ''};
        ${icon.position.includes('bottom') ? `top: ${100 - parseInt(icon.position.match(/bottom-\[([^%]+)%\]/)[1])}%` : ''};
        ${icon.position.includes('left') ? `left: ${icon.position.match(/left-\[([^%]+)%\]/)[1]}%` : ''};
        ${icon.position.includes('right') ? `left: ${100 - parseInt(icon.position.match(/right-\[([^%]+)%\]/)[1])}%` : ''};`}>
          <div
            class="parallax-element"
            data-depth={icon.depth}
          >
            <div class="floating-icon" style={`animation-delay: ${icon.delay}s`}>
              <Icon name={icon.name} class={icon.opacity} size={icon.size} />
            </div>
          </div>
        </div>
      ))
    }
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const header = document.getElementById("header-section");
    const parallaxContainer = document.getElementById("parallax-container");
    const elements = document.querySelectorAll(".parallax-element");
    const poster = document.getElementById("avatar");
    const skillSection = document.getElementById("skill-section");
    
    const width = poster?.clientWidth;
    
    // Avatar 3D effect on mouse move
    poster?.addEventListener("mousemove", (e) => {
      const { layerX, layerY } = e;
      
      const xRotation = ((layerY - width / 2) / width) * 10;
      const yRotation = ((layerX - width / 2) / width) * 10;
      
      poster.style.transform = `
      perspective(800px)
      scale(1.05)
      rotateX(${xRotation}deg)
      rotateY(${yRotation}deg)`;
    });

    poster?.addEventListener("mouseout", () => {
      poster.style.transform = `
      perspective(500px)
      scale(1)
      rotateX(0)
      rotateY(0)`
    });

    // Section navigation with pixelation effect
    let currentSection = 0;
    let isAnimating = false;
    const maxPixelation = 20; // Maximum pixelation level
    const sections = [
      document.getElementById("header-section"),
      document.getElementById("skill-section"),
      document.getElementById("courses-section"),
      document.getElementById("about-section"),
      document.getElementById("contact-section")
    ].filter(section => section !== null);
    
    // Add section IDs to all sections if they don't have them
    const coursesSection = document.querySelector('section:nth-of-type(3)');
    const aboutSection = document.querySelector('section:nth-of-type(4)');
    const contactSection = document.querySelector('section:nth-of-type(5)');
    
    if (coursesSection && !coursesSection.id) coursesSection.id = 'courses-section';
    if (aboutSection && !aboutSection.id) aboutSection.id = 'about-section';
    if (contactSection && !contactSection.id) contactSection.id = 'contact-section';
    
    function applyPixelationEffect(element, level) {
      if (!element) return;
      element.style.filter = `blur(${level * 0.15}px)`;
      element.style.opacity = `${1 - (level / maxPixelation) * 0.5}`;
    }
    
    function navigateToSection(index) {
      if (isAnimating || index < 0 || index >= sections.length || index === currentSection) return;
      
      isAnimating = true;
      const currentElement = sections[currentSection];
      const targetElement = sections[index];
      
      // Pixelate out current section
      let pixelationLevel = 0;
      const pixelateOut = setInterval(() => {
        pixelationLevel += 2;
        applyPixelationEffect(currentElement, pixelationLevel);
        
        if (pixelationLevel >= maxPixelation) {
          clearInterval(pixelateOut);
          
          // Scroll to target section
          targetElement.scrollIntoView({ behavior: 'auto' });
          currentSection = index;
          
          // Pixelate in new section
          let reversePixelation = maxPixelation;
          const pixelateIn = setInterval(() => {
            reversePixelation -= 2;
            applyPixelationEffect(targetElement, reversePixelation);
            
            if (reversePixelation <= 0) {
              clearInterval(pixelateIn);
              applyPixelationEffect(targetElement, 0);
              isAnimating = false;
            }
          }, 30);
        }
      }, 30);
    }
    
    // Handle wheel event for section navigation
    window.addEventListener('wheel', (e) => {
      if (isAnimating) return;
      
      if (e.deltaY > 0) {
        // Scroll down - go to next section
        navigateToSection(currentSection + 1);
      } else if (e.deltaY < 0) {
        // Scroll up - go to previous section
        navigateToSection(currentSection - 1);
      }
      
      // Prevent default scroll behavior
      e.preventDefault();
    }, { passive: false });
    
    // Handle keyboard navigation
    window.addEventListener('keydown', (e) => {
      if (isAnimating) return;
      
      if (e.key === 'ArrowDown' || e.key === 'PageDown') {
        navigateToSection(currentSection + 1);
        e.preventDefault();
      } else if (e.key === 'ArrowUp' || e.key === 'PageUp') {
        navigateToSection(currentSection - 1);
        e.preventDefault();
      }
    });
    
    // Initialize all sections
    sections.forEach((section, index) => {
      if (index !== currentSection) {
        applyPixelationEffect(section, 0);
      }
    });

    // Parallax effect for larger screens
    if (!elements.length || !parallaxContainer || window.innerWidth < 768) {
      return;
    }

    let windowWidth = window.innerWidth;
    let windowHeight = window.innerHeight;

    function updateParallaxEffect(e: any) {
      const { clientX: mouseX, clientY: mouseY } = e;
      const centerX = windowWidth / 2;
      const centerY = windowHeight / 2;
      const percentX = (mouseX - centerX) / centerX;
      const percentY = (mouseY - centerY) / centerY;
      
      elements.forEach((element: Element) => {
        if (!(element instanceof HTMLElement)) return;
        
        const depth = parseFloat(element.getAttribute("data-depth") || "0.1");
        const moveX = percentX * depth * 100;
        const moveY = percentY * depth * 100;
        
        element.style.transform = `translate(${moveX}px, ${moveY}px)`;
      });
    }

    function resetPositions() {
      elements.forEach((element: Element) => {
        if (!(element instanceof HTMLElement)) return;
        
        element.style.transition = "transform 0.5s ease-out";
        element.style.transform = "translate(0px, 0px)";

        setTimeout(() => {
          if (element instanceof HTMLElement) {
            element.style.transition = "transform 0.1s ease-out";
          }
        }, 500);
      });
    }

    function updateDimensions() {
      windowWidth = window.innerWidth;
      windowHeight = window.innerHeight;

      if (windowWidth < 768) {
        parallaxContainer?.classList.add("hidden");
        parallaxContainer?.classList.remove("block");

        window.removeEventListener("mousemove", updateParallaxEffect);
        header?.removeEventListener("mouseleave", resetPositions);
      } else {
        parallaxContainer?.classList.remove("hidden");
        parallaxContainer?.classList.add("block");

        window.addEventListener("mousemove", updateParallaxEffect);
        header?.addEventListener("mouseleave", resetPositions);
      }
    }

    updateDimensions();

    window.addEventListener("resize", updateDimensions);

    return () => {
      window.removeEventListener("mousemove", updateParallaxEffect);
      window.removeEventListener("resize", updateDimensions);
      window.removeEventListener("scroll", updatePixelationEffect);
      header?.removeEventListener("mouseleave", resetPositions);
    };
  });
</script>

<style>
  .parallax-element {
    will-change: transform;
    transition: transform 0.2s ease-out;
    position: absolute;
    transform-origin: center center;
  }
  
  /* Estilos para todas las secciones */
  section {
    will-change: filter, opacity;
    transition: filter 0.3s ease-out, opacity 0.3s ease-out;
    scroll-snap-align: start;
    overflow: hidden;
  }
  
  #header-section {
    will-change: filter, opacity;
    transition: filter 0.3s ease-out, opacity 0.3s ease-out;
  }
  
  #header-section .container {
    transform-style: preserve-3d;
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    will-change: transform, opacity;
  }
  
  .icon-wrapper {
    position: absolute;
    transform-style: preserve-3d;
  }
  
  .floating-icon {
    animation: floating 6s ease-in-out infinite;
    transform-style: preserve-3d;
  }
  
  @keyframes floating {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-15px); }
    100% { transform: translateY(0px); }
  }
  
  .sombra {
    filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.8));
    user-drag: none;
    -webkit-user-drag: none;
    user-select: none;
    -moz-user-select: none;
  }

  #avatar {
    transition: transform 0.3s ease-out;
  }
  
  .text-focus-in {
    -webkit-animation: text-focus-in .7s cubic-bezier(0.550, 0.085, 0.680, 0.530) both;
    animation: text-focus-in .7s cubic-bezier(0.550, 0.085, 0.680, 0.530) both;
  }

  @-webkit-keyframes text-focus-in {
    0% {
      -webkit-filter: blur(12px);
      filter: blur(12px);
      opacity: 0;
    }
    100% {
      -webkit-filter: blur(0px);
      filter: blur(0px);
      opacity: 1;
    }
  }
  
  @keyframes text-focus-in {
    0% { -webkit-filter: blur(12px); filter: blur(12px); opacity: 0; }
    100% { -webkit-filter: blur(0px); filter: blur(0px); opacity: 1; }
  }
  
  /* Pixelation effect classes */
  .pixelate {
    image-rendering: pixelated;
    transition: filter 0.3s ease-out;
  }
  
  @keyframes pixelate-in {
    0% { filter: blur(0px); }
    100% { filter: blur(5px); }
  }
  
  /* Estilos para navegaciÃ³n por secciones */
  html, body {
    overflow: hidden;
    height: 100%;
    margin: 0;
    padding: 0;
  }
  
  main {
    height: 100vh;
    overflow: hidden;
  }
</style>