---
import { Icon } from "astro-icon/components";
import { iconsFloat, socialLinks} from "../data/dataHeader.json"


---

<section
  id="header-section"
  class="relative h-screen grid place-content-center text-focus-in scroll-smooth w-full"
>
  <div
    class="container p-4 rounded-4xl mx-auto px-4 sm:px-6 md:px-10 py-6 sm:py-8 md:py-20 z-10 relative grid grid-cols-1 md:grid-cols-2 gap-8 place-items-center"
  >
    <div class="text-center md:text-left">
      <h1 class="text-4xl sm:text-5xl md:text-7xl font-bold mb-4 sm:mb-6">
        <span class="text-3xl sm:text-4xl md:text-5xl">Hi there! 🚀</span>
        <span class="block text-blue-700 text-shadow-lg">I'm Daniel Uribe</span>
      </h1>
      <p
        class="text-lg sm:text-xl md:text-2xl font-mono font-medium uppercase mb-6 sm:mb-8 w-fit mx-auto md:mx-0 text-gray-600 text-shadow-lg underline decoration-amber-500 underline-offset-5"
      >
        Full-Stack Developer
      </p>
        <a 
          href="/Daniel-Ignacio-Uribe-Pulgar-CV.pdf" 
          download 
          class="group inline-flex items-center gap-2 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-bold py-3 px-6 rounded-lg transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 active:scale-95 overflow-hidden relative"
        >
          <Icon name="ant-design:cloud-download-outlined" size="20" class="group-hover:rotate-12 transition-transform duration-300" />
          <span class="relative z-10">Descargar CV</span>
          <span class="relative flex h-3 w-3">
            <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-600 opacity-75"></span>
            <span class="relative inline-flex rounded-full h-3 w-3 bg-green-600"></span>
          </span>
        </a>
    </div>
    <div class="grid place-items-center relative">
      <div
        id="avatar"
        class="overflow-hidden rounded-[50%] size-64 sm:size-72 md:size-80 bg-blue-300 drop-shadow-xl transform transition-shadow duration-300 ease hover:drop-shadow-2xl"
      >
        <img
          src="/avatar.png"
          alt="avatar"
          class="object-cover mx-auto h-full sombra"
        />
      </div>
      <!-- redes sociales -->
     {
      socialLinks.map(social => {
        const { icon, url, iconClasses, parentClasses } = social;
        return (
      <div
        class={parentClasses}
      >
        <a 
        href={url}
        target="_blank"
        >
        <Icon
        name={icon}
        size="25"
        class={iconClasses}
        />
        </a>
      </div>
        )
      })
     }

    </div>
  </div>

  <div class="absolute overflow-hidden inset-0 z-0 hidden md:block" id="parallax-container">
    {
      iconsFloat.map((icon) => (
        <div class="icon-wrapper absolute" style={`top: 0; left: 0; ${icon.position.includes('top') ? `top: ${icon.position.match(/top-\[([^%]+)%\]/)[1]}%` : ''};
        ${icon.position.includes('bottom') ? `top: ${100 - parseInt(icon.position.match(/bottom-\[([^%]+)%\]/)[1])}%` : ''};
        ${icon.position.includes('left') ? `left: ${icon.position.match(/left-\[([^%]+)%\]/)[1]}%` : ''};
        ${icon.position.includes('right') ? `left: ${100 - parseInt(icon.position.match(/right-\[([^%]+)%\]/)[1])}%` : ''};`}>
          <div
            class="parallax-element"
            data-depth={icon.depth}
          >
            <div class="floating-icon" style={`animation-delay: ${icon.delay}s`}>
              <Icon name={icon.name} class={icon.opacity} size={icon.size} />
            </div>
          </div>
        </div>
      ))
    }
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const header = document.getElementById("header-section");
    const parallaxContainer = document.getElementById("parallax-container");
    const elements = document.querySelectorAll(".parallax-element");
    const headerContent = document.querySelector(".container");
    const poster = document.getElementById("avatar");

    const width: any = poster?.clientWidth;
    const height: any = poster?.clientHeight;

    poster?.addEventListener("mousemove", (e) => {
      const { layerX, layerY } = e;

      const xRotation = ((layerY - width / 2) / width) * 10;
      const yRotation = ((layerX - width / 2) / width) * 10;

      const string = `
      perspective(800px)
      scale(1.05)
      rotateX(${xRotation}deg)
      rotateY(${yRotation}deg)`

      poster.style.transform = string;
    });

    poster?.addEventListener("mouseout", () => {
      poster.style.transform = `
      perspective(500px)
      scale(1)
      rotateX(0)
      rotateY(0)`
    })

    if (!elements.length || !parallaxContainer || window.innerWidth < 768) {
      return;
    }

    let windowWidth = window.innerWidth;
    let windowHeight = window.innerHeight;

    function updateParallaxEffect(e: any) {
      const { clientX: mouseX, clientY: mouseY } = e;

      const centerX = windowWidth / 2;
      const centerY = windowHeight / 2;

      const percentX = (mouseX - centerX) / centerX;
      const percentY = (mouseY - centerY) / centerY;

      elements.forEach((element: Element) => {
        if (!(element instanceof HTMLElement)) return;
        
        const depth = parseFloat(element.getAttribute("data-depth") || "0.1");
        const moveX = percentX * depth * 100;
        const moveY = percentY * depth * 100;
        
        element.style.transform = `translate(${moveX}px, ${moveY}px)`;
      });
    }

    function resetPositions() {
      elements.forEach((element: Element) => {
        if (!(element instanceof HTMLElement)) return;
        
        element.style.transition = "transform 0.5s ease-out";
        element.style.transform = "translate(0px, 0px)";

        setTimeout(() => {
          if (element instanceof HTMLElement) {
            element.style.transition = "transform 0.1s ease-out";
          }
        }, 500);
      });
    }

    function updateDimensions() {
      windowWidth = window.innerWidth;
      windowHeight = window.innerHeight;

      if (windowWidth < 768) {
        parallaxContainer?.classList.add("hidden");
        parallaxContainer?.classList.remove("block");

        window.removeEventListener("mousemove", updateParallaxEffect);
        header?.removeEventListener("mouseleave", resetPositions);
      } else {
        parallaxContainer?.classList.remove("hidden");
        parallaxContainer?.classList.add("block");

        window.addEventListener("mousemove", updateParallaxEffect);
        header?.addEventListener("mouseleave", resetPositions);
      }
    }

    updateDimensions();

    window.addEventListener("resize", updateDimensions);

    // Definimos la función de scroll 3D para el header
    const handleScroll = () => {
      if (!header) return;
      
      const scrollPosition = window.scrollY;
      const headerHeight = header.offsetHeight;
      const scrollProgress = Math.min(scrollPosition / (headerHeight * 0.5), 1);
      
      // Aplicar transformación 3D basada en el scroll SOLO al contenedor principal
      if (headerContent && headerContent instanceof HTMLElement) {
        const rotateX = scrollProgress * 40; // Rotación máxima de 15 grados
        const translateZ = scrollProgress * -100; // Efecto de profundidad
        const scale = 1 - (scrollProgress * 0.15); // Reducción de escala sutil
        const opacity = 1 - (scrollProgress * 0.5); // Reducción de opacidad
        
        headerContent.style.transform = `
          perspective(1000px) 
          rotateX(${rotateX}deg) 
          translateZ(${translateZ}px) 
          scale(${scale})
        `;
        headerContent.style.opacity = opacity.toString();
      }
    };
    
    // Inicializar el efecto de scroll
    window.addEventListener("scroll", handleScroll);
    handleScroll(); // Aplicar el efecto inicial

    return () => {
      window.removeEventListener("mousemove", updateParallaxEffect);
      window.removeEventListener("resize", updateDimensions);
      window.removeEventListener("scroll", handleScroll);
      header?.removeEventListener("mouseleave", resetPositions);
    };
  });
</script>

<style>
  .parallax-element {
    will-change: transform;
    transition: transform 0.2s ease-out;
    position: absolute;
    transform-origin: center center;
  }
  
  /* Estilo para el contenedor principal con perspectiva 3D */
  #header-section .container {
    transform-style: preserve-3d;
    transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    will-change: transform, opacity;
  }
  
  .icon-wrapper {
    position: absolute;
    transform-style: preserve-3d;
  }
  
  /* Efecto de levitación para los iconos */
  .floating-icon {
    animation: floating 6s ease-in-out infinite;
    transform-style: preserve-3d;
  }
  
  @keyframes floating {
    0% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-15px);
    }
    100% {
      transform: translateY(0px);
    }
  }
  
  .sombra {
    filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.8));
    user-drag: none;
    -webkit-user-drag: none;
    user-select: none;
    -moz-user-select: none;
  }

  #avatar {
    transition: transform 0.3s ease-out;
  }
  
  .text-focus-in {
    -webkit-animation: text-focus-in .7s cubic-bezier(0.550, 0.085, 0.680, 0.530) both;
    animation: text-focus-in .7s cubic-bezier(0.550, 0.085, 0.680, 0.530) both;
  }

  @-webkit-keyframes text-focus-in {
    0% {
      -webkit-filter: blur(12px);
      filter: blur(12px);
      opacity: 0;
    }
    100% {
      -webkit-filter: blur(0px);
      filter: blur(0px);
      opacity: 1;
    }
  }
  
  @keyframes text-focus-in {
    0% {
      -webkit-filter: blur(12px);
      filter: blur(12px);
      opacity: 0;
    }
    100% {
      -webkit-filter: blur(0px);
      filter: blur(0px);
      opacity: 1;
    }
  }
</style>